


Опишите жизненный цикл компонентов React. В чем отличие Class Components от Functional Components?

В чем отличие Class Components от Functional Components?
Классовая компонента - это класс. Методы жизненного цикла в основном являются переопределниями методов суперкласса.
Функциональная компонента - это функция. Методы жизненного цикла выражаются здесь в хуках.
Хуки нельзя использовать в классовых компонентах.
В классовой компоненте обычно больше кода и она менее удобная для чтения.
Везде надо this ставить, могут возникнуть проблемы с захватом this, когда метод в методе вызывается.
Для каждого эффекта вручную надо сравнивать предыдущее значение и текущее.
Класс может использовать только 1 контекст за раз.
В классах нельзя использовать useLayoutEffect (или можно сделать аналог, но это будет делаться вообще не так тривиально, как в функциональных компонентах).
Реакт в документации рекомендует использовать функциональные компоненты, что значит, что классовые в будущем могут перестать поддерживать.


Жизненный цикл:

1) Монтирование.
1.1) Классовая компонента:
1.1.1) Вызов конструктора
constructor(props){
  super(props)
  this.state = {<initial-state>}
}
1.1.2) Рендер (вызов метода render)



Условия запуска рендера:
● Монтирование компоненты
● Изменился state
● Изменились props
● Родитель перерендерился. Чтобы предотвратить рендер текущей компоненты, если её родитель перерендерился, но state & props остались неизменны, нужно обернуть функциональную компоненту в React.memo или отнаследовать классовую компоненту от React.PureComponent.
● Примечание: React в Dev mode просто так делает 2 рендера компоненты сразу независимо от перечисленных условий.
● Примечание: я не нешёл конкретной информации по поводу того как храниться контекст, но под капотом скорее всего он хранится как часть component state.




Функциональная компонента.

Этапы рендера:
1) Выполнение тела функции компоненты и возврат получившегося JSX.
● useState: при монтировании вычисление начального состояния, иначе возврат текущего.
● useMemo & useCallback: вычисляют новый результат при монтировании или если вместо массива зависимостей передано undefined или если одна из зависимостей в массиве изменилась.

2) Применение JSX в реальный DOM браузера.

3) Отрисовка реального DOM браузера на экран (screen repaint).
Отрисовка будет отложена (см. далее), если при рендере выяснилось, что надо вызывать useLayoutEffect.

4) Вызов эффектов (useEffect & useLayoutEffect).
● эффект: вызывается, если произошло монтирование компоненты или изменилась хотя бы одна из зависимостей или вместо зависимостей передано undefined.
● clenup-функция: функция-эффект может вернуть clenup-функцию, которая вызывается сразу перед следующим вызовом текущего эффекта или при размонтировании компоненты.

Есть три этапа вывода JSX на экран:
1. Рендер нового JSX путём вызова компоненты-функции (получение виртуального DOM).
2. Применение этого JSX в реальный DOM браузера.
3. Отрисовка реального DOM браузера на экран пользователя (screen repaint).
● Если текущий рендер привёл к вызову useLayoutEffect и этот useLayoutEffect изменил state, что вызовет новый рендер, то между этим и новым рендером обновлённый реальный DOM не будет отрисован на экран пользователя, но все данные, чтобы его отрисовать (такие как высота, ширина элементов), будут вычислены и их можно взять из рефа, чтобы подогнать свои элементы по размерам без мерцания неготовых элементов на экране.
Отрисовка произойдёт, если текущий рендер не вызвал изменение state (то есть это последний рендер в цкпочке рендеров) или если в текущем рендере нет нужды вызывать useLayoutEffect.
● useLayoutEffect выполнится раньше useEffect, даже если он в коде написан позже.


Class Component:
https://react.dev/reference/react/Component


Конкретные методы жизненного цикла:
● создание состояния компоненты:
constructor(props){
  this.state = {
    /* initialState */
  }
}
const [state, setState] = useState(/* initialState или ()=>initialState */ )

● монтирование компоненты:
override componentDidMount(){ /* код */ }
useEffect(()=>{ /* код */ },[])

● обновление компоненты:
override componentDidUpdate(prevProps, prevState, snapshot?){ /* код */ }

● размонтирование компоненты
override componentWillUnmount(){ /* код */ }
useEffect(()=>{ return ()=>{ /* код */ } },[])

● обновление состояния:
const [state, setState] = useState(/* initial-state или ()=>initial-state */ )
setState(/* newState или prevState=>newState */)
this.setState({ newStatePart } или prevState=>newState )

